import{_ as e,c as a,o as s,b as p}from"./app.389e78aa.js";const g=JSON.parse('{"title":"项目结构","description":"","frontmatter":{},"headers":[{"level":2,"title":"packages（网页端）","slug":"packages-网页端","link":"#packages-网页端","children":[]},{"level":2,"title":"apps/server（模拟数据服务器）","slug":"apps-server-模拟数据服务器","link":"#apps-server-模拟数据服务器","children":[]},{"level":2,"title":"packages/（组件库）","slug":"packages-组件库","link":"#packages-组件库","children":[]}],"relativePath":"work/struct.md"}'),c={name:"work/struct.md"},r=p(`<h1 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-hidden="true">#</a></h1><p>本篇将解析项目目录、分区介绍，以便分工，但不包含node_modules讲解。</p><h2 id="packages-网页端" tabindex="-1">packages（网页端） <a class="header-anchor" href="#packages-网页端" aria-hidden="true">#</a></h2><p>LangUI组件库的主要页面，包含通用性组件、布局型组件、导航型组件、数据录入型组件、数据展示型组件、反馈型组件等。</p><p><code>public</code>存放<code>plop.js</code>模块，<code>src</code>是源代码文件夹.</p><h2 id="apps-server-模拟数据服务器" tabindex="-1">apps/server（模拟数据服务器） <a class="header-anchor" href="#apps-server-模拟数据服务器" aria-hidden="true">#</a></h2><p>使用vite-plugin-vue模拟服务器API，请求其中定义的API，返回一些数据，检验是否符合预期，以便在部署前发现问题。</p><p>项目的基本思路就是用物料作为模板，生成对应元素，元素组成组件库。</p><h2 id="packages-组件库" tabindex="-1">packages/（组件库） <a class="header-anchor" href="#packages-组件库" aria-hidden="true">#</a></h2><p>使用<code>vite build</code>编译打包模块。其打包结果为一个<code>*.*.umd.js</code>格式的文件，即我们要分发给编辑器负责人员使用的模块。 要对模块进行打包，则在相应目录下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pnpm run build </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>模块将在dist文件夹下生成。</p>`,12),t=[r];function n(d,i,l,o,h,_){return s(),a("div",null,t)}const k=e(c,[["render",n]]);export{g as __pageData,k as default};
